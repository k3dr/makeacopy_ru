name: Build Release

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
   
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Install Android SDK NDK 27.3.13750724
        run: |
          yes | ${ANDROID_HOME}/cmdline-tools/latest/bin/sdkmanager --sdk_root=${ANDROID_HOME} "ndk;27.3.13750724"
        env:
          ANDROID_SDK_ROOT: ${{ env.ANDROID_HOME }}

      - name: Check NDK path
        run: ls -l $ANDROID_HOME/ndk

      # Build OpenCV native libraries from source
      - name: Build OpenCV native libraries
        run: |
          chmod +x scripts/build_opencv_android.sh
          ./scripts/build_opencv_android.sh

      - name: Prepare OpenCV for app
        run: |
          chmod +x scripts/prepare_opencv.sh
          ./scripts/prepare_opencv.sh

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Decode Keystore
        env:
          ENCODED_KEYSTORE: ${{ secrets.KEYSTORE_BASE64 }}
        run: |
          if [ -n "$ENCODED_KEYSTORE" ]; then
            echo "$ENCODED_KEYSTORE" | base64 --decode > app/keystore.jks
            echo "Keystore decoded successfully"
          else
            echo "No keystore provided, will build unsigned APK"
            exit 1
          fi

      - name: Extract versionName and versionCode from build.gradle
        id: extract_version
        run: |
          VERSION=$(grep versionName app/build.gradle | head -1 | sed 's/[^"]*"\([^"]*\)".*/\1/')
          VERSION_CODE=$(grep versionCode app/build.gradle | head -1 | grep -o '[0-9]*')
          echo "VERSION=$VERSION"
          echo "VERSION_CODE=$VERSION_CODE"
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "VERSION_CODE=$VERSION_CODE" >> $GITHUB_OUTPUT

      - name: Update version in build.gradle
        run: |
          sed -i.bak -E "s/^\s*versionCode\s+[0-9]+/versionCode ${{ steps.extract_version.outputs.VERSION_CODE }}/" app/build.gradle
          sed -i.bak -E "s/^\s*versionName\s+\"[^\"]+\"/versionName \"${{ steps.extract_version.outputs.VERSION }}\"/" app/build.gradle

      - name: Build Release APK and Bundle
        run: |
            ./gradlew assembleRelease bundleRelease \
            -PSIGNING_KEY_ALIAS="${SIGNING_KEY_ALIAS}" \
            -PSIGNING_KEY_PASSWORD="${SIGNING_KEY_PASSWORD}" \
            -PSIGNING_STORE_PASSWORD="${SIGNING_STORE_PASSWORD}"
            # Rename outputs with version
            mv app/build/outputs/apk/release/app-release.apk \
            app/build/outputs/apk/release/MakeACopy-v${{ steps.extract_version.outputs.VERSION }}-release.apk
            mv app/build/outputs/bundle/release/app-release.aab \
            app/build/outputs/bundle/release/MakeACopy-v${{ steps.extract_version.outputs.VERSION }}-release.aab
            
        env:
            SIGNING_KEY_ALIAS: ${{ secrets.SIGNING_KEY_ALIAS }}
            SIGNING_KEY_PASSWORD: ${{ secrets.SIGNING_KEY_PASSWORD }}
            SIGNING_STORE_PASSWORD: ${{ secrets.SIGNING_STORE_PASSWORD }}

      # Verify signing
      - name: Verify APK signature
        run: |
          APK=app/build/outputs/apk/release/MakeACopy-v${{ steps.extract_version.outputs.VERSION }}-release.apk
          APKSIGNER=$(find "$ANDROID_HOME/build-tools" -name apksigner | sort -Vr | head -n1)
          "$APKSIGNER" verify --verbose "$APK"
          echo "APK verification completed"

      - name: Generate checksums
        run: |
          cd app/build/outputs/apk/release/
          sha256sum MakeACopy-v${{ steps.extract_version.outputs.VERSION }}-release.apk > MakeACopy-v${{ steps.extract_version.outputs.VERSION }}-release.apk.sha256
          cd ../../bundle/release/
          sha256sum MakeACopy-v${{ steps.extract_version.outputs.VERSION }}-release.aab > MakeACopy-v${{ steps.extract_version.outputs.VERSION }}-release.aab.sha256

      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          name: "MakeACopy v${{ steps.extract_version.outputs.VERSION }}"
          tag_name: ${{ github.ref_name }}
          body: |
            ðŸ“¦ MakeACopy v${{ steps.extract_version.outputs.VERSION }}
            - Dokumentenscanner mit OCR, PDF-Export & Datenschutz
          files: |
            app/build/outputs/apk/release/MakeACopy-v${{ steps.extract_version.outputs.VERSION }}-release.apk
            app/build/outputs/bundle/release/MakeACopy-v${{ steps.extract_version.outputs.VERSION }}-release.aab
            app/build/outputs/apk/release/MakeACopy-v${{ steps.extract_version.outputs.VERSION }}-release.apk.sha256
            app/build/outputs/bundle/release/MakeACopy-v${{ steps.extract_version.outputs.VERSION }}-release.aab.sha256
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}     

      - name: Upload APK/AAB artifacts
        uses: actions/upload-artifact@v4
        with:
          name: MakeACopy-${{ steps.extract_version.outputs.VERSION }}
          path: |
            app/build/outputs/apk/release/*.apk
            app/build/outputs/bundle/release/*.aab
            app/build/outputs/**/*.sha256

            
