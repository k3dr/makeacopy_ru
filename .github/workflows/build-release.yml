name: Build Release

on:
  push:
    branches: [main]
    tags: ['v*']
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      
      # Python für deterministische CMake-Skripte pinnen (nur Host-Interpreter, keine Py-Bindings)
      - name: Set up Python 3.11.2
        uses: actions/setup-python@v5
        with:
          python-version: '3.11.2'

      # NDK installieren
      - name: Install Android SDK NDK 27.3.13750724
        run: |
          yes | ${ANDROID_HOME}/cmdline-tools/latest/bin/sdkmanager --sdk_root=${ANDROID_HOME} "ndk;27.3.13750724"
        env:
          ANDROID_SDK_ROOT: ${{ env.ANDROID_HOME }}

      # Install exact CMake version to match FDroid (3.31.6 from bookworm-backports)
      - name: Set up CMake 3.31.6
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: '3.31.6'

      # Use the installed CMake on PATH to align with FDroid
      - name: Export ANDROID_*, CMake and Python paths
        run: |
          echo "ANDROID_NDK_HOME=$ANDROID_HOME/ndk/27.3.13750724" >> $GITHUB_ENV
          echo "ANDROID_SDK_ROOT=$ANDROID_HOME" >> $GITHUB_ENV
          echo "BUILD_GENERATOR=Unix Makefiles" >> $GITHUB_ENV
          echo "ORT_CMAKE=$(which cmake)" >> $GITHUB_ENV
          echo "OPENCV_CMAKE=$(which cmake)" >> $GITHUB_ENV
          echo "PY3_BIN=$(which python3)" >> $GITHUB_ENV
          cmake --version
          python3 --version

      - name: Set deterministic environment
        run: |
          echo "SOURCE_DATE_EPOCH=1700000000" >> $GITHUB_ENV
          echo "TZ=UTC" >> $GITHUB_ENV
          echo "LC_ALL=C" >> $GITHUB_ENV
          echo "LANG=C" >> $GITHUB_ENV
          echo "PYTHONHASHSEED=0" >> $GITHUB_ENV

      - name: Check installed NDK
        run: ls -l $ANDROID_NDK_HOME

      # (optional) Nur arm64-v8a auf CI bauen – auskommentiert lassen, wenn alle ABIs gewünscht
      - name: Limit ABIs to arm64-v8a
        run: echo "ABIS=arm64-v8a" >> $GITHUB_ENV

      - name: Build OpenCV native libraries
        run: |
          chmod +x scripts/build_opencv_android.sh
          REQUIRE_PINNED_JNI=1 VERBOSE=1 DEBUG=1 ./scripts/build_opencv_android.sh

      - name: Collect reproducibility evidence (native)
        run: |
          chmod +x scripts/collect_repro_evidence.sh
          ./scripts/collect_repro_evidence.sh

      - name: Upload native reproducibility evidence
        uses: actions/upload-artifact@v4
        with:
          name: native-repro-evidence
          path: |
            scripts/repro_out/**
            scripts/repro_out.tgz

      - name: Prepare OpenCV for app
        run: |
          chmod +x scripts/prepare_opencv.sh
          ./scripts/prepare_opencv.sh

      - name: Build ONNX Runtime
        run: |
          chmod +x scripts/build_onnxruntime_android.sh
          ./scripts/build_onnxruntime_android.sh

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Keystore nur für TAG-Builds dekodieren (PRs/branch: überspringen)
      - name: Decode Keystore (tags only)
        if: startsWith(github.ref, 'refs/tags/')
        env:
          ENCODED_KEYSTORE: ${{ secrets.KEYSTORE_BASE64 }}
        run: |
          if [ -n "$ENCODED_KEYSTORE" ]; then
            echo "$ENCODED_KEYSTORE" | base64 --decode > app/keystore.jks
            echo "Keystore decoded successfully"
          else
            echo "No keystore provided. Tag build will proceed unsigned."
          fi

      - name: Extract versionName and versionCode from build.gradle
        id: extract_version
        run: |
          VERSION=$(grep -m1 'versionName' app/build.gradle | sed 's/[^"]*"\([^"]*\)".*/\1/')
          VERSION_CODE=$(grep -m1 'versionCode' app/build.gradle | grep -o '[0-9]\+')
          echo "VERSION=$VERSION"
          echo "VERSION_CODE=$VERSION_CODE"
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "VERSION_CODE=$VERSION_CODE" >> $GITHUB_OUTPUT

      # Build (unsigned) – PRs/branches
      - name: Build (unsigned) – PRs/branches
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        run: |
          ./gradlew --no-daemon clean bundleRelease -PenableAbiSplits=false
          ./gradlew --no-daemon assembleRelease -PenableAbiSplits=true

      # Build (signed) – tags
      - name: Build (signed) – tags
        if: startsWith(github.ref, 'refs/tags/')
        env:
          SIGNING_KEY_ALIAS: ${{ secrets.SIGNING_KEY_ALIAS }}
          SIGNING_KEY_PASSWORD: ${{ secrets.SIGNING_KEY_PASSWORD }}
          SIGNING_STORE_PASSWORD: ${{ secrets.SIGNING_STORE_PASSWORD }}
        run: |
          EXTRA_PROPS=""
          if [ -n "${SIGNING_KEY_ALIAS}" ] && [ -n "${SIGNING_KEY_PASSWORD}" ] && [ -n "${SIGNING_STORE_PASSWORD}" ]; then
            EXTRA_PROPS="-PSIGNING_KEY_ALIAS=${SIGNING_KEY_ALIAS} -PSIGNING_KEY_PASSWORD=${SIGNING_KEY_PASSWORD} -PSIGNING_STORE_PASSWORD=${SIGNING_STORE_PASSWORD}"
          else
            echo "Signing secrets missing → building unsigned even for tag."
          fi
          ./gradlew --no-daemon clean bundleRelease -PenableAbiSplits=false $EXTRA_PROPS
          ./gradlew --no-daemon assembleRelease -PenableAbiSplits=true $EXTRA_PROPS

      - name: Rename artifacts
        run: |
          set -euo pipefail
          VERSION="${{ steps.extract_version.outputs.VERSION }}"
          APK_OUT="app/build/outputs/apk/release"
          AAB_OUT="app/build/outputs/bundle/release"
          if [ -f "$AAB_OUT/app-release.aab" ]; then
            mv "$AAB_OUT/app-release.aab" "$AAB_OUT/MakeACopy-v${VERSION}-release.aab"
          fi
          shopt -s nullglob
          for apk in "$APK_OUT"/app-*-release.apk; do
            abi=$(basename "$apk" | sed -n 's/^app-\(.*\)-release\.apk$/\1/p')
            [ -n "$abi" ] && mv "$apk" "$APK_OUT/MakeACopy-v${VERSION}-${abi}-release.apk"
          done

      - name: Verify APK signatures (tags only)
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          set -euo pipefail
          VERSION="${{ steps.extract_version.outputs.VERSION }}"
          APK_OUT="app/build/outputs/apk/release"
          APKSIGNER=$(find "$ANDROID_HOME/build-tools" -name apksigner | sort -Vr | head -n1)
          for f in "$APK_OUT"/MakeACopy-v${VERSION}-*-release.apk; do
            [ -f "$f" ] && "$APKSIGNER" verify --verbose "$f"
          done

      - name: Generate checksums
        run: |
          set -euo pipefail
          VERSION="${{ steps.extract_version.outputs.VERSION }}"
          APK_OUT="app/build/outputs/apk/release"
          AAB_OUT="app/build/outputs/bundle/release"
          if command -v sha256sum >/dev/null 2>&1; then H=sha256sum; else H="shasum -a 256"; fi
          for f in "$APK_OUT"/MakeACopy-v${VERSION}-*-release.apk; do
            [ -f "$f" ] && $H "$f" > "$f.sha256"
          done
          if [ -f "$AAB_OUT/MakeACopy-v${VERSION}-release.aab" ]; then
            $H "$AAB_OUT/MakeACopy-v${VERSION}-release.aab" > "$AAB_OUT/MakeACopy-v${VERSION}-release.aab.sha256"
          fi

      - name: Load Release Notes
        if: startsWith(github.ref, 'refs/tags/')
        id: release_notes
        run: |
          VERSION_CODE=${{ steps.extract_version.outputs.VERSION_CODE }}
          CHANGELOG_FILE="fastlane/metadata/android/en-US/changelogs/${VERSION_CODE}.txt"
          echo "Using changelog: $CHANGELOG_FILE"
          if [ -f "$CHANGELOG_FILE" ]; then
            NOTES=$(cat "$CHANGELOG_FILE")
          else
            echo "::error file=$CHANGELOG_FILE::Release Notes file not found!"
            exit 1
          fi
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          echo "$NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release (tags only)
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          name: "MakeACopy v${{ steps.extract_version.outputs.VERSION }}"
          tag_name: ${{ github.ref_name }}
          body: ${{ steps.release_notes.outputs.notes }}
          files: |
            app/build/outputs/apk/release/MakeACopy-v${{ steps.extract_version.outputs.VERSION }}-arm64-v8a-release.apk
            app/build/outputs/apk/release/MakeACopy-v${{ steps.extract_version.outputs.VERSION }}-armeabi-v7a-release.apk
            app/build/outputs/apk/release/MakeACopy-v${{ steps.extract_version.outputs.VERSION }}-x86_64-release.apk
            app/build/outputs/apk/release/MakeACopy-v${{ steps.extract_version.outputs.VERSION }}-x86-release.apk
            app/build/outputs/apk/release/MakeACopy-v${{ steps.extract_version.outputs.VERSION }}-arm64-v8a-release.apk.sha256
            app/build/outputs/apk/release/MakeACopy-v${{ steps.extract_version.outputs.VERSION }}-armeabi-v7a-release.apk.sha256
            app/build/outputs/apk/release/MakeACopy-v${{ steps.extract_version.outputs.VERSION }}-x86_64-release.apk.sha256
            app/build/outputs/apk/release/MakeACopy-v${{ steps.extract_version.outputs.VERSION }}-x86-release.apk.sha256
            app/build/outputs/bundle/release/MakeACopy-v${{ steps.extract_version.outputs.VERSION }}-release.aab
            app/build/outputs/bundle/release/MakeACopy-v${{ steps.extract_version.outputs.VERSION }}-release.aab.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload APK/AAB artifacts
        uses: actions/upload-artifact@v4
        with:
          name: MakeACopy-${{ steps.extract_version.outputs.VERSION }}
          path: |
            app/build/outputs/apk/release/*.apk
            app/build/outputs/apk/release/*.sha256
            app/build/outputs/bundle/release/*.aab
            app/build/outputs/bundle/release/*.sha256
